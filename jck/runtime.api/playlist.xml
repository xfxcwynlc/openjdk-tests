<?xml version='1.0' encoding='UTF-8'?>
<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->
<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../TKG/playlist.xsd">
	<include>../jck.mk</include>
	<test>
		<testCaseName>jck_custom</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=$(JCK_CUSTOM_TARGET),jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck_target_folder_check</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(TEST_ROOT)$(D)jck$(D)jck_target_folder_check$(D)jck_target_folder_check.sh $(JCK_VERSION) $(JCK_ROOT) $(TEST_ROOT); \
	$(TEST_STATUS)</command>
		<levels>
			<level>special</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<platformRequirements>os.linux,arch.x86,bits.64</platformRequirements>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-instrument</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/instrument,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-invoke</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/invoke,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-reflect</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/reflect,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-Package</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/Package,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-String</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/String,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-StringBuilder</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/StringBuilder,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-StringBuffer</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/StringBuffer,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-ClassLoader</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/ClassLoader,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-ModuleLayer</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/ModuleLayer,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>9+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-module</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/module,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>9+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-StackWalker</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/StackWalker,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>9+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-Module_class</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/Module_class,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>9+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-SecurityManager</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/SecurityManager,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-System</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/System,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-constant</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/constant,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>12+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-Class</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang/Class,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-signaturetest</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/signaturetest,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-modulegraph</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/modulegraph,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>9+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_util-regex</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_util/regex,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_naming-spi</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_naming/spi,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_util-ResourceBundle</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_util/ResourceBundle,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_applet</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_applet,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_awt</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254, and on rest for backlog/issues/485. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<version>11</version>
		</disabled>
		<disabled>
			<comment>Disabled on win64 on jdk8 due to backlog/issues/504. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_windows(_mixed)?</plat>
			<version>8</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_awt,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_beans</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254; on aix for backlog/issues/486. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?|ppc64_aix(_mixed)?</plat>
			<version>11</version>
		</disabled>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
			<version>8</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_beans,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_io</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_io,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_lang,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_math</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_math,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_net</testCaseName>
		<disabled>
			<comment>Disabled on all platforms due to backlog/issues/462. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<version>11</version>
		</disabled>
		<disabled>
			<comment>Disabled on all platforms due to backlog/issues/462. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<version>8</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_net,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_nio</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_nio,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_rmi</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_rmi,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_security</testCaseName>
		<disabled>
			<comment>Disabled on win for backlog/issues/488. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_windows(_mixed)?</plat>
			<version>11</version>
		</disabled>
		<disabled>
			<comment>Disabled on win for backlog/issues/488. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_windows(_mixed)?</plat>
			<version>8</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_security,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_sql</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_sql,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_text</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_text,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_time</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_time,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_util</testCaseName>
		<disabled>
			<comment>Disabled on osx and win for backlog/issues/489. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_windows(_mixed)?|x86-64_mac(_mixed)?</plat>
			<version>11</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/java_util,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_accessibility</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_accessibility,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_activation</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_activation,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>8</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_activity</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_activity,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>8</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_annotation</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_annotation,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_crypto</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_crypto,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_imageio</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE)-test-args=$(Q)tests=api/javax_imageio,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_lang</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_lang,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_management</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_management,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_naming</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_naming,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_net</testCaseName>
		<disabled>
			<comment>Disabled on all platforms due to backlog/issues/461. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<version>11</version>
		</disabled>
		<disabled>
			<comment>Disabled on all platforms due to backlog/issues/461. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<version>8</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_net,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_print</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_print,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_rmi</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_rmi,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_script</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_script,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_security</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_security,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_sound</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?</plat>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_sound,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_sql</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_sql,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_swing</testCaseName>
		<disabled>
			<comment>Disabled on osx for infrastructure/issues/5254, on win for backlog/issues/487 and on others for backlog/issues/484. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<version>11</version>
		</disabled>
		<disabled>
			<comment>Disabled on osx on jdk8 due to backlog/issues/5254 and on win32 due to backlog/issues/503. Awaiting some automation improvements, in the interim these targets will be run manually</comment>
			<plat>x86-64_mac(_mixed)?|x86-32_windows(_mixed)?</plat>
			<version>8</version>
		</disabled>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_swing,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_tools</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_tools,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_transaction</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_transaction,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>8</version>
			<version>15+</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_xml</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/javax_xml,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<!-- This is a "special" test that requires kerberos server set up -->
	<test>
		<testCaseName>jck-runtime-api-org_ietf</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/org_ietf,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>special</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-org_omg</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/org_omg,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>8</version>
		</versions>
	</test>
	<test>
		<testCaseName>jck-runtime-api-org_w3c</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/org_w3c,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-org_xml</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/org_xml,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-xinclude</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/xinclude,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-xsl</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/xsl,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-serializabletypes</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JCK_CMD_TEMPLATE) -test-args=$(Q)tests=api/serializabletypes,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<versions>
			<version>9+</version>
		</versions>
	</test>
</playlist>
