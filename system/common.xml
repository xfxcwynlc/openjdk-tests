<?xml version="1.0"?>
<project name="systemtest_common" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>Build STF based System Tests </description>

	<!-- set global properties for this build -->
	<property name="SYSTEMTEST_ROOT" value="${TEST_ROOT}/system" />
	<property name="SYSTEMTEST_DEST" value="${BUILD_ROOT}/system" />
	<property environment="env" />
	
	<condition property="isZOS" value="true">
		<equals arg1="${os.name}" arg2="z/OS"/>
	</condition>
	
	<condition property="git-prefix" value="git" else="https">
		<isset property="isZOS"/>
	</condition>
	
	<condition property="openjdk_systemtest_repo" value="${env.ADOPTOPENJDK_SYSTEMTEST_REPO}" else="${git-prefix}://github.com/AdoptOpenJDK/openjdk-systemtest.git">
		<isset property="env.ADOPTOPENJDK_SYSTEMTEST_REPO"/>
	</condition>
	<condition property="openjdk_systemtest_branch" value="${env.ADOPTOPENJDK_SYSTEMTEST_BRANCH}" else="master">
		<isset property="env.ADOPTOPENJDK_SYSTEMTEST_BRANCH"/>
	</condition>
	
	<condition property="openj9_systemtest_repo" value="${env.OPENJ9_SYSTEMTEST_REPO}" else="${git-prefix}://github.com/eclipse-openj9/openj9-systemtest.git">
		<isset property="env.OPENJ9_SYSTEMTEST_REPO"/>
	</condition>
	<condition property="openj9_systemtest_branch" value="${env.OPENJ9_SYSTEMTEST_BRANCH}" else="master">
		<isset property="env.OPENJ9_SYSTEMTEST_BRANCH"/>
	</condition>
	
	<condition property="stf_repo" value="${env.STF_REPO}" else="${git-prefix}://github.com/AdoptOpenJDK/stf.git">
		<isset property="env.STF_REPO"/>
	</condition>
	<condition property="stf_branch" value="${env.STF_BRANCH}" else="master">
		<isset property="env.STF_BRANCH"/>
	</condition>
	
	<target name="common_init">
		<if>
			<not>
				<available file="${SYSTEMTEST_DEST}" type="dir" />
			</not>
			<then>
				<mkdir dir="${SYSTEMTEST_DEST}" />
			</then>
		</if>
	</target>

	<target name="clone_stf">
		<echo message="Cloning from: ${stf_repo} -b ${stf_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="-b"/>
			<arg value="${stf_branch}"/>
			<arg value="${stf_repo}"/>
		</exec>
		<if>
			<isset property="isZOS" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
				   <fileset dir="${SYSTEMTEST_ROOT}/stf/.git/info" includes="**/*"/>
				</delete>  
				<mkdir dir="${SYSTEMTEST_ROOT}/stf/.git/info" />
				<move file="${SYSTEMTEST_ROOT}/stf/.gitattributes.zos" tofile="${SYSTEMTEST_ROOT}/stf/.git/info/attributes" /> 
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/stf" failonerror="false">
					<arg value="rm" />
					<arg value="--cached" />
					<arg value="-r" />
					<arg value="-q" />
					<arg value="." />
				</exec>
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/stf" failonerror="false">
					<arg value="reset" />
					<arg value="--hard" />
				</exec>
			</then>
		</if>
		<checkGitRepoSha repoDir="${SYSTEMTEST_ROOT}/stf" />
	</target>

	<target name="clone_systemtest">
		<echo message="Cloning from: ${openjdk_systemtest_repo} -b ${openjdk_systemtest_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="-b"/>
			<arg value="${openjdk_systemtest_branch}"/>
			<arg value="${openjdk_systemtest_repo}"/>
		</exec>
		<if>
			<isset property="isZOS" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
				   <fileset dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/.git/info" includes="**/*"/>
				</delete>  
				<mkdir dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/.git/info" />
				<move file="${SYSTEMTEST_ROOT}/openjdk-systemtest/.gitattributes.zos" tofile="${SYSTEMTEST_ROOT}/openjdk-systemtest/.git/info/attributes" /> 
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest" failonerror="false">
					<arg value="rm" />
					<arg value="--cached" />
					<arg value="-r" />
					<arg value="-q" />
					<arg value="." />
				</exec>
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest" failonerror="false">
					<arg value="reset" />
					<arg value="--hard" />
				</exec>
			</then>
		</if>
		<checkGitRepoSha repoDir="${SYSTEMTEST_ROOT}/openjdk-systemtest" />
	</target>
	
	<target name="clone_openj9-systemtest">
		<echo message="Cloning from: ${openj9_systemtest_repo} -b ${openj9_systemtest_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="-b"/>
			<arg value="${openj9_systemtest_branch}"/>
			<arg value="${openj9_systemtest_repo}"/>
		</exec>
		<if>
			<isset property="isZOS" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
				   <fileset dir="${SYSTEMTEST_ROOT}/openj9-systemtest/.git/info" includes="**/*"/>
				</delete>  
				<mkdir dir="${SYSTEMTEST_ROOT}/openj9-systemtest/.git/info" />
				<move file="${SYSTEMTEST_ROOT}/openj9-systemtest/.gitattributes.zos" tofile="${SYSTEMTEST_ROOT}/openj9-systemtest/.git/info/attributes" /> 
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/openj9-systemtest" failonerror="false">
					<arg value="rm" />
					<arg value="--cached" />
					<arg value="-r" />
					<arg value="-q" />
					<arg value="." />
				</exec>
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/openj9-systemtest" failonerror="false">
					<arg value="reset" />
					<arg value="--hard" />
				</exec>
			</then>
		</if>
		<checkGitRepoSha repoDir="${SYSTEMTEST_ROOT}/openj9-systemtest" />
	</target>

	<target name="check_systemtest" depends="common_init">
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/stf" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/stf does not exist, clone from GitHub" />
				<antcall target="clone_stf" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/stf exists, skip cloning" />
			</else>
		</if>
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/openjdk-systemtest" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/openjdk-systemtest does not exist, clone from GitHub" />
				<antcall target="clone_systemtest" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/openjdk-systemtest exists, skip cloning" />
			</else>
		</if>
		<if>
			<or>
				<contains string="${JVM_VERSION}" substring="openj9"/>
				<contains string="${JVM_VERSION}" substring="ibm"/>
			</or>
			<then>
				<if>
					<not>
						<available file="${SYSTEMTEST_ROOT}/openj9-systemtest" type="dir" />
					</not>
					<then>
						<echo message="${SYSTEMTEST_ROOT}/openj9-systemtest does not exist, clone from GitHub" />
						<antcall target="clone_openj9-systemtest" inheritall="true" />
					</then>
					<else>
						<echo message="${SYSTEMTEST_ROOT}/openj9-systemtest exists, skip cloning" />
					</else>
				</if>
			</then>
		</if>
	</target>
	
	<target name="configure_systemtest" depends="check_systemtest">
		<if>
			<or>
				<contains string="${JVM_VERSION}" substring="openj9"/>
				<contains string="${JVM_VERSION}" substring="ibm"/>
			</or>
			<then>
				<ant antfile="${SYSTEMTEST_ROOT}/openj9-systemtest/openj9.build/build.xml" dir="${SYSTEMTEST_ROOT}/openj9-systemtest/openj9.build/" target="configure" inheritAll="false"/>
			</then>
			<else>
				<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/" target="configure" inheritAll="false"/>
			</else>
		</if>
	</target>
					
	<target name="common_dist" description="generate the distribution">
		<copy todir="${SYSTEMTEST_DEST}/stf">
			<fileset dir="${SYSTEMTEST_ROOT}/stf" includes="**" />
		</copy>
		<copy todir="${SYSTEMTEST_DEST}/openjdk-systemtest" failonerror="false">
			<fileset dir="${SYSTEMTEST_ROOT}/openjdk-systemtest" includes="**" />
		</copy>
		<copy todir="${SYSTEMTEST_DEST}/openj9-systemtest" failonerror="false">
			<fileset dir="${SYSTEMTEST_ROOT}/openj9-systemtest" includes="**" />
		</copy>
		<copy todir="${SYSTEMTEST_DEST}/systemtest_prereqs/">
			<fileset dir="${TEST_ROOT}/systemtest_prereqs/" includes="**" />
		</copy>
	</target>

	<!-- target to build all projects in the repository.  -->
	<!-- dir must be set on the ant task otherwise the basedir property is not set to a new value in the subant task. -->
	<!-- Also make sure stf is built -->
	<target name="build-dependencies" depends="configure_systemtest">
		<if>
			<or>
				<contains string="${JVM_VERSION}" substring="openj9"/>
				<contains string="${JVM_VERSION}" substring="ibm"/>
			</or>

			<then>
				<ant antfile="${SYSTEMTEST_ROOT}/openj9-systemtest/openj9.build/build.xml" dir="${SYSTEMTEST_ROOT}/openj9-systemtest/openj9.build" inheritAll="false"/>
			</then>
			<else>
				<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build" inheritAll="false"/>
			</else>
		</if>
		<antcall target="common_dist" inheritall="false" />
	</target>
	
	<!-- To make sure common_build target only excute once, the common_build target runs only if common_build.executed value is not set -->
	<target name="common_build" unless="common_build.executed">
		<echo message="target common_build is called....." />
		<antcall target="build-dependencies" inheritall="true" />
	</target>
		
	<target name="clean">
		<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build" inheritAll="false" target="clean"/>
		<if>
			<or>
				<contains string="${JVM_VERSION}" substring="openj9"/>
				<contains string="${JVM_VERSION}" substring="ibm"/>
			</or>
			<then>
				<ant antfile="${SYSTEMTEST_ROOT}/openj9-systemtest/openj9.build/build.xml" dir="${SYSTEMTEST_ROOT}/openj9-systemtest/openj9.build" inheritAll="false" target="clean"/>
			</then>
		</if>		
		<ant antfile="${SYSTEMTEST_ROOT}/stf/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/stf/stf.build" inheritAll="false" target="clean"/>
	</target>
</project>
