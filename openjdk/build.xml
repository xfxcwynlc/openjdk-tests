<?xml version="1.0"?>

<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->

<project name="openjdk regression tests" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		stage openjdk test make files
	</description>

	<!-- set properties for this build -->
	<property name="DEST" value="${BUILD_ROOT}/openjdk" />
	<property name="src" location="." />
	<property environment="env" />
	<property name="LIB" value="tohandler_simple"/>
	<import file="${TEST_ROOT}/TKG/scripts/getDependencies.xml"/>

	<target name="getJtreg">
		<mkdir dir="${DEST}"/>
		<if>
			<or>
				<matches pattern="^[89]{1}$" string="${JDK_VERSION}"/>
				<matches pattern="^[1][01234]" string="${JDK_VERSION}"/>
			</or>
			<then>
				<property name="jtregTar" value="jtreg-4.2.0-tip.tar"/>
			</then>
			<else>
				<property name="jtregTar" value="jtreg-5.1-b01.tar"/>
			</else>
		</if>
		<if>
			<not>
				<available file="${jtregTar}" />
			</not>
			<then>
				<if> <available file="custom_jtreg.tar.gz"/>
					<then>
						<echo message="Using custom_jtreg.tar.gz"/>
							<copy file="custom_jtreg.tar.gz" tofile="${jtregTar}.gz"/>
					</then>
				<else>
					<echo message="Getting Jtreg from https://ci.adoptopenjdk.net/job/dependency_pipeline/lastSuccessfulBuild/artifact/jtreg/${jtregTar}.gz"/>
					<exec executable="curl" failonerror="true">
						<arg line="--retry 5 -OLJSks https://ci.adoptopenjdk.net/job/dependency_pipeline/lastSuccessfulBuild/artifact/jtreg/${jtregTar}.gz" />
					</exec>
				</else>
				</if>
				<exec executable="gzip" failonerror="true">
					<arg line="-d ${jtregTar}.gz" />				</exec>
			</then>
		</if>
		<if>
			<contains string="${SPEC}" substring="zos" />
			<then>
				<exec executable="tar" failonerror="true">
					<arg line="xfo ${jtregTar} -C ${DEST}" />
				</exec>
			</then>
		<else>
			<exec executable="sh" failonerror="true">
				<arg line="-c 'cat ${jtregTar} | (cd ${DEST} &amp;&amp; tar xof -)'" />

			</exec>
		</else>
		</if>
	</target>

	<target name="getOpenjdk" depends="openjdk-jdk.check" unless="jdkdir.exists">
		<!-- Windows API limitation of file paths having 260 characters or fewer,
		     run the config command to allow file paths of 4096 characters 
		-->
		<if>
			<contains string="${SPEC}" substring="win" />
			<then>
				<exec executable="git" failonerror="false">
					<arg line="config --global core.longpaths true" />
				</exec>
			</then>
		</if>
		<set-property name="JDK_REPO_ISSET" if-property-isset="env.JDK_REPO" />
		<set-property name="JDK_BRANCH_ISSET" if-property-isset="env.JDK_BRANCH" />
		<set-property name="OPENJDK_SHA_ISSET" if-property-isset="env.OPENJDK_SHA" />
		<if>
			<and>
				<isset property="JDK_REPO_ISSET"/>
				<isset property="JDK_BRANCH_ISSET"/>
			</and>
			<then>
				<echo> Using user specified repo and branch</echo>
				<if>
					<contains string="${SPEC}" substring="zos"/>
					<then>
						<propertyregex 
							property="JDK_REPO_SPECIFIC"
							input="${env.JDK_REPO}"
							regexp="https://github.ibm.com/"
							replace="git@github.ibm.com:"
							defaultValue="${env.JDK_REPO}"/>
					</then>
					<else>
						<property name="JDK_REPO_SPECIFIC" value="${env.JDK_REPO}" />
					</else>
				</if>
				<if>
					<isset property="OPENJDK_SHA_ISSET"/>
					<then>
						<echo message="git clone -q -b ${env.JDK_BRANCH} ${JDK_REPO_SPECIFIC} openjdktemp" />
						<exec executable="git" failonerror="true">
							<arg line="clone -q -b ${env.JDK_BRANCH} ${JDK_REPO_SPECIFIC} openjdktemp" />
						</exec>
						<exec executable="git" failonerror="true" dir="openjdktemp">
							<arg line="checkout ${env.OPENJDK_SHA}" />
						</exec>
					</then>
					<else>
						<echo message="git clone --depth 1 -q -b ${env.JDK_BRANCH} ${JDK_REPO_SPECIFIC} openjdktemp" />
						<exec executable="git" failonerror="true">
							<arg line="clone --depth 1 -q -b ${env.JDK_BRANCH} ${JDK_REPO_SPECIFIC} openjdktemp" />
						</exec>
					</else>
				</if>
				<if>
					<contains string="${env.JDK_REPO}" substring="corretto"/>
					<then>
						<move file="openjdktemp/src" tofile="openjdk-jdk"/>
						<delete dir="openjdktemp"/>
					</then>
					<else>
						<move file="openjdktemp" tofile="openjdk-jdk"/>
					</else>
				</if>
				<if>
					<contains string="${env.JDK_REPO}" substring="dragonwell8"/>
					<then>
						<exec executable="bash" failonerror="true" dir="openjdk-jdk">
							<arg line="get_source_dragonwell.sh -s github" />
						</exec>
					</then>
				</if>
			</then>
			<else>
				<if>
					<matches string="${JDK_IMPL}" pattern="openj9|ibm" />
					<then>
						<if>
							<equals arg1="${env.ORIGIN_JDK_VERSION}" arg2="next" />
							<then>
								<property name="jdkName" value="openj9-openjdk-jdk" />
							</then>
							<else>
								<if> <contains string="${SPEC}" substring="zos"/>
									<then>
										<property name="jdkName" value="openj9-openjdk-jdk${JDK_VERSION}-zos" />
									</then>
									<else>
										<property name="jdkName" value="openj9-openjdk-jdk${JDK_VERSION}" />
									</else>
								</if>
							</else>
						</if>
						<if>
							<contains string="${SPEC}" substring="zos"/>
							<then>
								<property name="regressionRepo" value="git@github.ibm.com:runtimes/${jdkName}.git" />
							</then>
							<else>
								<property name="regressionRepo" value="https://github.com/ibmruntimes/${jdkName}.git" />
							</else>
						</if>
					</then>
					<else>
						<if>
							<and>
								<contains string="${env.SPEC}" substring="aarch64" />
								<equals arg1="${JDK_VERSION}" arg2="8" />
							</and>
							<then>
								<property name="jdkName" value="openjdk-aarch64-jdk8u" />
							</then>
							<else>
								<echo message="Using a git ls-remote command to determine if the jdk source repo has an available 'u' version yet." />
								<echo message="git ls-remote -h https://github.com/AdoptOpenJDK/openjdk-jdk${JDK_VERSION}u.git" />
								<exec executable="git" resultproperty="repo.exist" failonerror="false" timeout="30000">
									<env key="GIT_TERMINAL_PROMPT" value="0"/>
									<arg line="ls-remote -h https://github.com/AdoptOpenJDK/openjdk-jdk${JDK_VERSION}u.git" />
								</exec>
								<if>
									<equals arg1="${repo.exist}" arg2="0" />
									<then>
										<echo message="Command passed. Setting repo name to the 'u' version." />
										<property name="jdkName" value="openjdk-jdk${JDK_VERSION}u" />
									</then>
									<else>
										<echo message="Command failed, or tried to ask for a username due to access restrictions. Or both." />
										<echo message="Setting repo name to the non-'u' version." />
										<property name="jdkName" value="openjdk-jdk${JDK_VERSION}" />
									</else>
								</if>
							</else>
						</if>
						<property name="regressionRepo" value="https://github.com/AdoptOpenJDK/${jdkName}.git" />
					</else>
				</if>
				<if>
					<contains string="${JDK_IMPL}" substring="hotspot"/>
					<then>
						<!-- AdoptOpenJDK nighlty is using dev branch and default branch is master-->
						<property name="defaultBranch" value="-b dev"/>
					</then>
					<else>
						<property name="defaultBranch" value=""/>
					</else>
				</if>
				<if>
					<isset property="OPENJDK_SHA_ISSET"/>
					<then>
						<echo message="git clone -q ${defaultBranch} ${regressionRepo}" />
						<exec executable="git" failonerror="true">
							<arg line="clone -q ${defaultBranch} ${regressionRepo}" />
						</exec>
						<move file="${jdkName}" tofile="openjdk-jdk"/>
						<exec executable="git" failonerror="true" dir="openjdk-jdk">
							<arg line="checkout ${env.OPENJDK_SHA}" />
						</exec>
					</then>
					<else>
						<echo message="git clone --depth 1 -q ${defaultBranch} ${regressionRepo}" />
						<exec executable="git" failonerror="true">
							<arg line="clone --depth 1 -q ${defaultBranch} ${regressionRepo}" />
						</exec>
						<move file="${jdkName}" tofile="openjdk-jdk"/>
					</else>
				</if>
			</else>
		</if>
		<checkGitRepoSha repoDir="openjdk-jdk" />
	</target>
	
	<target name="openjdk-jdk.check">
		<condition property="jdkdir.exists">
			<available file="openjdk-jdk" type="dir"/>
		</condition>
	</target>

	<target name="getDependentLibsCheck" >
		<if>
			<or>
				<equals arg1="${JDK_IMPL}" arg2="ibm"  />
				<equals arg1="${JDK_IMPL}" arg2="openj9" />
			</or>
			<then>
				<antcall target="getDependentLibs"/>
			</then>
		</if>
	</target>
	
	<target name="dist" depends="getDependentLibsCheck, getJtreg, getOpenjdk" description="generate the distribution">
		<copy todir="${DEST}">
			<fileset dir="${src}" includes="*.xml,excludes/ProblemList*.txt,*.mk"/>
		</copy>
	</target>

	<target name="build" >
		<antcall target="dist" inheritall="true" />
	</target>
</project>
